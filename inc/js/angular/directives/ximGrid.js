// Generated by CoffeeScript 1.8.0

/**
 *  \details &copy; 2011  Open Ximdex Evolution SL [http://www.ximdex.org]
 *
 *  Ximdex a Semantic Content Management System (CMS)
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published
 *  by the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  See the Affero GNU General Public License for more details.
 *  You should have received a copy of the Affero GNU General Public License
 *  version 3 along with Ximdex (see LICENSE file).
 *
 *  If not, visit http://gnu.org/licenses/agpl-3.0.html.
 *
 *  @author Ximdex DevTeam <dev@ximdex.com>
 *  @version $Revision$
 */
angular.module('ximdex.common.directive').directive('ximGrid', [
  function() {
    return {
      replace: true,
      restrict: 'E',
      scope: {
        list: '=ximList',
        filterText: '=ximFilter',
        url: '=ximUrl',
        page: '=ximActualPage',
        pages: '=ximTotalPages',
        upPage: '=ximUpPage',
        downPage: '=ximDownPage',
        searching: '=ximSearching'
      },
      templateUrl: 'inc/js/angular/templates/ximGrid.html',
      controller: [
        '$scope', '$element', '$attrs', '$http', 'xUrlHelper', '$window', 'xMenu', 'xTabs', function($scope, $element, $attrs, $http, xUrlHelper, $window, xMenu, xTabs) {
          var postLoadActions, url;
          if ($attrs.ximInitFields) {
            $scope.fields = angular.fromJson($attrs.ximInitFields);
          }
          $scope.selected = [];
          $attrs.ximList = $scope.list;
          url = xUrlHelper.baseUrl() + '/';
          $scope.lastpage;
          $scope.page = 1;
          $scope.searching = false;
          $scope.JSONtoParams = function(json) {
            var i, j, k, res;
            res = {
              action: 'browser3',
              handler: 'SQL',
              method: 'search',
              output: 'JSON'
            };
            for (i in json) {
              if (json.hasOwnProperty(i)) {
                if (typeof json[i] !== 'string' & isNaN(json[i])) {
                  for (j in json[i]) {
                    if (json[i].hasOwnProperty(j)) {
                      if (typeof json[i][j] !== 'string' & isNaN(json[i][j])) {
                        for (k in json[i][j]) {
                          if (json[i][j].hasOwnProperty(k)) {
                            if (typeof json[i][j][k] === 'string' || !isNaN(json[i][j][k])) {
                              res['query[' + i + '][' + j + '][' + k + ']'] = json[i][j][k];
                            }
                          }
                        }
                      } else {
                        res['query[' + i + '][' + j + ']'] = json[i][j];
                      }
                    }
                  }
                } else {
                  res['query[' + i + ']'] = json[i];
                }
              }
            }
            return res;
          };
          $scope.updateGrid = function(page) {
            $scope.searching = true;
            $scope.showFieldsSelector = false;
            $scope.list.query.page = $scope.page;
            $http({
              url: url,
              method: 'POST',
              params: $scope.JSONtoParams($scope.list.query)
            }).success(function(data, status, headers, config) {
              $scope.filterText = '';
              $attrs.ximFilter = '';
              $scope.list = data;
              $scope.searching = false;
            }).error(function(data, status, headers, config) {
              if (page) {
                $scope.page = $scope.lastpage;
              }
              $scope.searching = false;
            });
          };
          $scope.upPage = function() {
            if (!$scope.searching & $scope.page < $scope.list.pages) {
              $scope.lastpage = $scope.page;
              $scope.page++;
              $scope.updateGrid(true);
            }
          };
          $scope.downPage = function() {
            if (!$scope.searching & $scope.page > 1) {
              $scope.lastpage = $scope.page;
              $scope.page--;
              $scope.updateGrid(true);
            }
          };
          $attrs.ximUpPage = $scope.upPage;
          $attrs.ximDownPage = $scope.downPage;
          $scope.selectItem = function(item, event) {
            var n;
            event.preventDefault();
            if (!$scope.searching) {
              if (event.ctrlKey) {
                if ($scope.isSelected(item.nodeid)) {
                  if (event.button === 2) {
                    return;
                  }
                  for (n in $scope.selected) {
                    if ($scope.selected.hasOwnProperty(n) && $scope.selected[n].nodeid === item.nodeid) {
                      $scope.selected.splice(n, 1);
                      return;
                    }
                  }
                } else {
                  $scope.selected.push(item);
                }
              } else {
                $scope.selected = [item];
              }
            }
          };
          $scope.isSelected = function(itemId) {
            var i, _i, _len, _ref;
            _ref = $scope.selected;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              i = _ref[_i];
              if (i.nodeid === itemId) {
                return true;
              }
            }
            return false;
          };
          $scope.sort = function(field) {
            if (!$scope.searching) {
              if ($scope.list.query.sorts[0].field !== field.target) {
                $scope.list.query.sorts[0].field = field.target;
                $scope.list.query.sorts[0].order = 'asc';
                $scope.page = 1;
              } else {
                if ($scope.list.query.sorts[0].order === 'asc') {
                  $scope.list.query.sorts[0].order = 'desc';
                } else {
                  $scope.list.query.sorts[0].order = 'asc';
                }
              }
              $attrs.ximList.query = $scope.list.query;
              $scope.updateGrid(false);
            }
          };
          $scope.$watch('fields', (function() {
            $scope.$broadcast('ui-refresh');
          }), true);
          $scope.$watch('filterText', function() {
            $scope.$broadcast('ui-refresh');
          });
          $scope.$on('toggleFieldsSelector', function(event) {
            if (!$scope.searching) {
              $scope.showFieldsSelector = !$scope.showFieldsSelector;
            }
          });
          $scope.openMenu = function(node, event) {
            var data, i, len, n, nodeToSearch, ref;
            event.stopImmediatePropagation();
            $scope.selectItem(node, event);
            if ($scope.selected[0].nodeid === null | $scope.selected[0].nodetypeid === null | $scope.selected[0].nodeid === '0') {
              return;
            }
            nodeToSearch = $scope.selected[0].nodeid;
            if ($scope.selected.length > 1) {
              ref = $scope.selected.slice(1);
              i = 0;
              len = ref.length;
              while (i < len) {
                n = ref[i];
                nodeToSearch += '-' + n.nodeid;
                i++;
              }
            }
            if ($window.com.ximdex.nodeActions[nodeToSearch] == null) {
              $http.get(xUrlHelper.getAction({
                action: 'browser3',
                method: 'cmenu',
                nodes: $scope.selected
              })).success(function(data) {
                if (data) {
                  $window.com.ximdex.nodeActions[nodeToSearch] = data;
                  postLoadActions(data, event, $scope.selected);
                }
              });
            } else {
              data = $window.com.ximdex.nodeActions[nodeToSearch];
              postLoadActions(data, event, $scope.selected);
            }
            return false;
          };
          return postLoadActions = function(data, event, selectedNodes) {
            if (data == null) {
              return;
            }
            if (event.pointers != null) {
              data.left = event.pointers[0].clientX + ($window.document.documentElement.scrollLeft ? $window.document.documentElement.scrollLeft : $window.document.body.scrollLeft);
              data.top = event.pointers[0].clientY + ($window.document.documentElement.scrollTop ? $window.document.documentElement.scrollTop : $window.document.body.scrollTop);
            }
            if (event.clientX != null) {
              data.left = event.clientX + ($window.document.documentElement.scrollLeft ? $window.document.documentElement.scrollLeft : $window.document.body.scrollLeft);
              data.top = event.clientY + ($window.document.documentElement.scrollTop ? $window.document.documentElement.scrollTop : $window.document.body.scrollTop);
            }
            xMenu.open(data, selectedNodes, xTabs.pushTab);
            data = null;
          };
        }
      ]
    };
  }
]);
